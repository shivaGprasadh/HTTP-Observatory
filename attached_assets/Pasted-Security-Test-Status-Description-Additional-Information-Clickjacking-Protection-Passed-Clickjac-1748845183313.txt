Security Test 	Status 	Description 	Additional Information
Clickjacking Protection 	Passed 	Clickjacking protection, using frame-ancestors 	The use of CSP's frame-ancestors directive offers fine-grained control over who can frame your site.
Default Deny Policy 	Failed 	Deny by default, using default-src 'none' 	Denying by default using default-src 'none'can ensure that your Content Security Policy doesn't allow the loading of resources you didn't intend to allow.
Base URI Security 	Failed 	Restricts use of the <base> tag by using base-uri 'none', base-uri 'self', or specific origins. 	The <base> tag can be used to trick your site into loading scripts from untrusted origins.
Form Action Security 	Passed 	Restricts where <form> contents may be submitted by using form-action 'none', form-action 'self', or specific URIs 	Malicious JavaScript or content injection could modify where sensitive form data is submitted to or create additional forms for data exfiltration.
Active Content Security (HTTPS) 	Failed 	Blocks loading of active content over HTTP or FTP 	Loading JavaScript or plugins can allow a man-in-the-middle to execute arbitrary code or your website. Restricting your policy and changing links to HTTPS can help prevent this.
Passive Content Security (HTTPS) 	Failed 	Blocks loading of passive content over HTTP or FTP 	This site's Content Security Policy allows the loading of passive content such as images or videos over insecure protocols such as HTTP or FTP. Consider changing them to load them over HTTPS.
Strict Dynamic Loading 	Info 	Uses CSP3's 'strict-dynamic' directive to allow dynamic script loading (optional) 	'strict-dynamic' lets you use a JavaScript shim loader to load all your site's JavaScript dynamically, without having to track script-src origins.
JavaScript eval() Protection 	Failed 	Blocks execution of JavaScript's eval() function by not allowing 'unsafe-eval' inside script-src 	Blocking the use of JavaScript's eval() function can help prevent the execution of untrusted code.
Inline JavaScript Protection 	Passed 	Blocks execution of inline JavaScript by not allowing 'unsafe-inline' inside script-src 	Blocking the execution of inline JavaScript provides CSP's strongest protection against cross-site scripting attacks. Moving JavaScript to external files can also help make your site more maintainable.
Inline Style Protection 	Passed 	Blocks inline styles by not allowing 'unsafe-inline' inside style-src 	Blocking inline styles can help prevent attackers from modifying the contents or appearance of your page. Moving styles to external stylesheets can also help make your site more maintainable.
Plugin Execution Protection 	Failed 	Blocks execution of plug-ins, using object-src restrictions 	Blocking the execution of plug-ins via object-src 'none' or as inherited from default-src can prevent attackers from loading Flash or Java in the context of your page.